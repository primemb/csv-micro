services:
  rest:
    build:
      context: .
      dockerfile: ./apps/rest/Dockerfile
      target: development
    command: npm run start:dev rest
    env_file:
      - ./apps/rest/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3001:3001'
    depends_on:
      rabbitmq:
        condition: service_healthy
  csv:
    build:
      context: .
      dockerfile: ./apps/csv/Dockerfile
      target: development
    command: npm run start:dev csv
    env_file:
      - ./apps/csv/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'
    depends_on:
      rabbitmq:
        condition: service_healthy
  storage:
    build:
      context: .
      dockerfile: ./apps/storage/Dockerfile
      target: development
    command: npm run start:dev storage
    env_file:
      - ./apps/storage/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  postgres:
    image: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: example
    volumes:
      - pgData:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d postgres']
      interval: 30s
      timeout: 5s
      retries: 10
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - '8888:80'
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: pgadmin
    volumes:
      - pgadmin_data_micro:/var/lib/pgadmin
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 5s
      retries: 10

volumes:
  pgData:
  pgadmin_data_micro:
